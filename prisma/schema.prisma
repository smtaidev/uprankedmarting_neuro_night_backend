datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ============ ENUMS ============
enum UserRole {
  organization_admin
  agent
  super_admin
}

enum UserStatus {
  ACTIVE
  BLOCKED
  DELETED
}

enum PlanLevel {
  only_real_agent
  only_ai
  ai_then_real_agent
}

enum PlanType {
  MONTHLY
  YEARLY
}

enum Interval {
  day
  week
  month
  year
}

enum PaymentStatus {
  PENDING
  COMPLETED
  CANCELED
  REFUNDED
}

enum SubscriptionStatus {
  ACTIVE
  TRIALING
  PAST_DUE
  CANCELED
  INCOMPLETE
  INCOMPLETE_EXPIRED
  UNPAID
}

enum FeedbackType {
  SERVICE
  AGENT
}

enum DocFor {
  AI
  AGENT
}

enum Status {
  PROCESSING
  COMPLETED
  FAILED
}

// ============ MODELS ============
model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  email     String  @unique
  password  String
  image     String? @default("")
  bio       String? @default("")
  phone     String  @unique
  isDeleted Boolean @default(false)

  passwordChangedAt DateTime?
  isVerified        Boolean   @default(false)
  isResetPassword   Boolean   @default(false)
  canResetPassword  Boolean   @default(false)
  isResentOtp       Boolean   @default(false)
  otp               Int? // New field for OTP
  otpExpiresAt      DateTime? // New field for OTP expiration

  status UserStatus @default(ACTIVE)
  role   UserRole   @default(organization_admin)

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  Agent             Agent?
  ownedOrganization Organization?     @relation(name: "UserOwnedOrganization")
  ServiceFeedbacks  ServiceFeedback[]
  AgentFeedbacks    AgentFeedback[]
  assignedAgents    AgentAssignment[] @relation("AssignmentMadeBy")

  @@map("users")
}

enum AgentStatus {
  free
  busy
  offline
}

enum CallStatus {
  RINGING
  IN_PROGRESS
  COMPLETED
  FAILED
  BUSY
  NO_ANSWER
  CANCELED
}

enum employmentType {
  part_time
  full_time
  contract
}

model Agent {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @unique @db.ObjectId

  status       AgentStatus @default(offline)
  sip_address  String?
  sip_username String?
  sip_password String?

  // Personal info
  dateOfBirth    DateTime
  gender         String
  address        String
  emergencyPhone String
  ssn            String?

  // Professional info 
  skills String[] @default([])

  employeeId  String?
  isAvailable Boolean @default(true)
  assignTo    String? @db.ObjectId

  // employment information
  jobTitle       String
  employmentType employmentType
  department     String

  workEndTime       String?
  workStartTime     String?
  startWorkDateTime DateTime?
  endWorkDateTime   DateTime?

  // Call metrics
  totalCalls   Int @default(0)
  successCalls Int @default(0)
  droppedCalls Int @default(0)

  // Relations
  user           User            @relation(fields: [userId], references: [id])
  organization   Organization?   @relation(fields: [assignTo], references: [id])
  AgentFeedbacks AgentFeedback[]
  calls          Call[]

  assignments AgentAssignment[]

  @@map("agents")
}

enum AssignmentStatus {
  PENDING
  APPROVED
  REJECTED
  REMOVAL_REQUESTED
}

model AgentAssignment {
  id             String           @id @default(auto()) @map("_id") @db.ObjectId
  agentUserId    String           @db.ObjectId
  organizationId String           @db.ObjectId
  status         AssignmentStatus @default(PENDING)
  assignedBy     String?          @db.ObjectId // User who made the assignment
  assignedAt     DateTime         @default(now())
  approvedAt     DateTime?
  rejectedAt     DateTime?
  reason         String? // Reason for rejection if applicable

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agent          Agent        @relation(fields: [agentUserId], references: [userId], onDelete: Cascade)
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  assignedByUser User?        @relation(fields: [assignedBy], references: [id], name: "AssignmentMadeBy")
}

model Organization {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  name               String
  industry           String?
  address            String
  websiteLink        String
  organizationNumber String?
  ownerId            String? @unique @db.ObjectId

  agentVoiceUrl String?
  leadQuestions String[] @default([])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  agents                Agent[] // One Organization can have multiple Agents
  ownedOrganization     User?                   @relation(fields: [ownerId], references: [id], name: "UserOwnedOrganization")
  subscriptions         Subscription[]
  documents             OrganizationDoc[]
  calls                 Call[]
  tools                 ToolIntegration[]
  availableTwilioNumber AvailableTwilioNumber[]
  voice                 UploadVoice?
  AiknowledgeBase       AiknowledgeBase[]
  AgentAssignment       AgentAssignment[]
  questions             Question[] // ADD THIS LINE - Questions relation
  qaPairs               QaPair[]

  @@map("organizations")
}

model UploadVoice {
  id                    String  @id @default(auto()) @map("_id") @db.ObjectId
  voiceId               String  @unique @db.ObjectId
  voiceName             String
  requires_verification Boolean
  organizationId        String  @unique @db.ObjectId

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Organization Organization @relation(fields: [organizationId], references: [id])
}

model aiagent {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  agentId        String   @unique
  organizationId String   @unique
  // Timestamps
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("aiagents")
}

model AiknowledgeBase {
  id                String       @id @default(auto()) @map("_id") @db.ObjectId
  organizationId    String       @db.ObjectId
  knowledgeBaseId   String       @unique
  knowledgeBaseName String
  Organization      Organization @relation(fields: [organizationId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model OrganizationDoc {
  id             String @id @default(auto()) @map("_id") @db.ObjectId
  organizationId String @db.ObjectId
  docFor         DocFor @default(AI)
  content        Json

  // ai
  aiDocId   String?
  aiDocName String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  organization Organization @relation(fields: [organizationId], references: [id])
  // REMOVE THIS LINE: questions             Question[]

  @@map("company_docs")
}

model Plan {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  planName      String
  amount        Float
  currency      String
  interval      Interval       @default(month)
  intervalCount Int
  freeTrialDays Int?
  productId     String
  priceId       String
  active        Boolean
  description   String?
  features      Json?
  planLevel     PlanLevel
  Subscription  Subscription[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("plans")
}

model Subscription {
  id              String             @id @default(auto()) @map("_id") @db.ObjectId
  organizationId  String             @db.ObjectId
  planId          String             @db.ObjectId
  startDate       DateTime
  endDate         DateTime?
  amount          Float
  stripePaymentId String             @unique
  paymentStatus   PaymentStatus      @default(PENDING)
  status          SubscriptionStatus @default(INCOMPLETE)
  organization    Organization?      @relation(fields: [organizationId], references: [id])
  plan            Plan?              @relation(fields: [planId], references: [id])
  planLevel       PlanLevel
  purchasedNumber String
  sid             String
  numberOfAgents  Int?               @default(0)
  createdAt       DateTime           @default(now())
  updatedAt       DateTime           @updatedAt

  @@map("subscriptions")
}

model Call {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  organizationId String @db.ObjectId // *
  receiverId     String @db.ObjectId // *

  from_number  String
  to_number    String
  account_sid  String?
  call_sid     String?
  call_status  String
  recordingUrl String?
  summary      String?

  callTime          DateTime  @default(now()) // 
  callType          String // direction
  call_duration     Int?
  call_started_at   DateTime  @default(now())
  call_completed_at DateTime?

  call_transcript    String?
  recording_duration Int?
  recording_sid      String?
  recording_status   String?
  recording_url      String?
  // Timestamps
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Relations
  receivedBy   Agent        @relation(fields: [receiverId], references: [userId])
  organization Organization @relation(fields: [organizationId], references: [id])

  @@map("calls")
}

model ServiceFeedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  clientId     String  @unique @db.ObjectId
  rating       Int
  feedbackText String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  client User @relation(fields: [clientId], references: [id], onDelete: Cascade)
}

model AgentFeedback {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  agentId      String  @unique @db.ObjectId
  clientId     String  @unique @db.ObjectId
  rating       Int
  feedbackText String?

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  agent  Agent @relation(fields: [agentId], references: [id], onDelete: Cascade)
  client User  @relation(fields: [clientId], references: [id], onDelete: Cascade)

  @@map("agent_feedbacks")
}

model ToolIntegration {
  id        String @id @default(auto()) @map("_id") @db.ObjectId
  companyId String @unique @db.ObjectId
  toolType  String
  config    Json

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  company Organization @relation(fields: [companyId], references: [id])

  @@map("tool_integrations")
}

model AvailableTwilioNumber {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  sid          String?
  phoneNumber  String  @unique
  friendlyName String

  capabilities Json // Stores { voice: boolean, sms: boolean, mms: boolean, fax: boolean }
  beta         Boolean   @default(false)
  countryCode  String    @default("US")
  isPurchased  Boolean   @default(false)
  purchasedAt  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  purchasedByOrganizationId String?       @db.ObjectId
  organization              Organization? @relation(fields: [purchasedByOrganizationId], references: [id])

  @@map("available_twilio_numbers")
}

model Question {
  id                String   @id @default(auto()) @map("_id") @db.ObjectId
  org_id            String   @db.ObjectId
  question_text     String
  question_keywords String[] @default([])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [org_id], references: [id])

  @@map("questions")
}

model QaPair {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  org_id   String @db.ObjectId
  conv_id  String
  question String
  answer   String

  createdAt DateTime @default(now())

  // Relations
  organization Organization @relation(fields: [org_id], references: [id])

  @@map("qa_pairs")
}